<% include ../../common/header.ejs %>
<section class="col-md-10" id="articleInfo">
<!--link href="<%= basePath %>/core/css/markdown.css" type="text/css" rel="stylesheet" -->
    <h1 id="title" class="articleInfo_title">公司项目NODEJS实践0.3[ mongo / session ...]</h1>
	<span id="date" class="articleInfo_date">2015-07-27</span><span id="kind" class="articleInfo_kind">nodejs</span><span id="author" class="articleInfo_author">小白</span>
	<div id="content" class="articleInfo_content clearfix markdown"><h2 id="-">一、前言</h2>
<p>⋅⋅⋅书接上回，我们搭建了WEB服务端路由、模板等功能，完成了register 通过ajax与后端的通信，今天主要完成数据与mongodb的存取，实现注册 / 登录 / 退出功能</p>
<p>⋅⋅⋅DEMO GIT <a href="https://github.com/xiaolulu/mynodejs.git">https://github.com/xiaolulu/mynodejs.git</a></p>
<h2 id="-db-">二、db操作</h2>
<p>⋅⋅⋅上一节我们已经安装过了mongo，本节主要是对其操作</p>
<h3 id="1-mongoose">1、mongoose</h3>
<p>⋅⋅⋅nodejs对 mongo的操作，我们使用 mongoose库</p>
<p>⋅⋅⋅在package.json添加mongoose，并npm install</p>
<p>⋅⋅⋅使用参考<a href="http://www.upopen.cn/article/info?id=559688a7f0e6e0665b000004">http://www.upopen.cn/article/info?id=559688a7f0e6e0665b000004</a></p>
<h3 id="2-root-web-db-sql-js-mongoose-">2、/root/web目录下创建 db/sql.js，用于对mongoose的操作，添加如下代码</h3>
<pre><code class="lang-javascript">        var mongoose = require( &#39;mongoose&#39;  ); //引用模块
        mongoose.connect( &#39;mongodb://127.0.0.1/myDB&#39;, function( err ){
            //连接mongoose，连接本地127.0.0.1,mongo的默认端口是 27017
            if( !err ){
                console.log( &#39;DB == connect to mongodb&#39; );
            } else {
                throw err;
            }
        } );

        var Schema = mongoose.Schema;

        var UserSchema = new Schema({ //创建User表模型，数据可据需求增减
            username: String,
            password: String,
            email: String,
            disabled: Boolean, //后面加注册后的邮件验证功能
            date: Date,
            power: Number  //后面会用到权限功能  
        });

        var UserModel = mongoose.model( &#39;User&#39;, UserSchema, &#39;User&#39; );

        function initData( data, db ){ //对参数做预处理，以防出现不合要求的参数，后面这块会做扩展
            var query = {};
            for( var key in data ){
                if( db.tree[ key ] ){
                    query[ key ] = data[ key ];
                }
            }
            return query;
        }

        function addUser( data, cb ){ //增加用户
            data = initData( data, UserSchema );
            ( new UserModel( data )).save( function( err, doc  ){
                cb( err, doc );
            })
        }
        function findUser( data, cb ){ //查找用户
            data = initData( data, UserSchema );
            UserModel.findOne( data ).exec( function( err, doc ){
                cb( err, doc );
            })
        }

        module.exports = {
            addUser: addUser,
            findUser: findUser
        }
</code></pre>
<h3 id="3-root-web-controls-user-js-">3、在 /root/web下新建controls/user.js，用于处理路由与数据存储的中间逻辑，添加代码如下</h3>
<pre><code class="lang-javascript">        var db = require( &#39;../db/sql&#39; ); //添加前面定义的db操作模块

        function addUser( req, res ){ //增加用户
            var data = req.body; //post过来的数据在req.body里，get过来的数据在req.query里
            data.date = new Date(); //数据里增加时间
            db.addUser( data, function( err, doc ){
            if( !err ){
                res.send( { code: 0, msg: &#39;add User Success&#39;, data: doc } );
                //对查询结果返回，返回格式统一为 {code: 返回码, msg: 返回描述, data: 返回值}
                }
            })
        }

        function findUser( req, res ){ //查找用户
            var data = req.body;
            db.addUser( data, function( err, doc ){
                if( !err ){
                    res.send(  { code: 0, msg: &#39;find User Success&#39;, data: doc }  );
                }
            })
        }

        module.exports = {
            addUser: addUser,
            findUser: findUser
        }
</code></pre>
<pre><code>    4、修改上节在/root/web/routes/issue.js定义的register函数改为
</code></pre><pre><code class="lang-javascript">
        function registerUser( req, res ){
            user.addUser( req, res );
        }
</code></pre>
<p>⋅⋅⋅并增加 /web/controls/user.js的引用</p>
<p>⋅⋅⋅再用node-dev启动项目，访问register，提交表单，可以看到返回成功，至此我们注册用户成功</p>
<h3 id="5-shell-mongo">5、使用shell mongo</h3>
<p>⋅⋅⋅打开shell，执行mongo，打开mongo终端</p>
<p>⋅⋅⋅执行use myDB //切换到myDB数据库</p>
<p>⋅⋅⋅执行db.User.find().pretty() //可以看到刚才我们新增的数据</p>
<h3 id="6-">6、增加登录查询</h3>
<p>⋅⋅⋅在/root/web/views/issue下新建login.ejs，添加登录form。</p>
<p>⋅⋅⋅在/root/static/module/issue 下新建 login的 js/css/img 静态文件，添加登录请求，如注册。</p>
<p>⋅⋅⋅我们在db操作/db.sql.js里及业务处理/controls/user.js已经增加查询方法，只需在/routes/index.js 及 issue里增加 登录查询即可，这里不在列出，参考 register 流程即可。</p>
<h3 id="7-session">7、session</h3>
<p>⋅⋅⋅上一步，我们走通了注册和登录查询功能，然后登录的目的是为了根据用户登录与否判断是否具备访问某些页面的权限。</p>
<p>⋅⋅⋅这里简单说下session（后面再单独详解）：网站保存信息或状态，页面端常用的是cookie，而对应服务端是session，登录状态需要保存服务端以防伪造页面端。而http（后面再单独详解）是无状态的，为使页面端与服务端关联，生成session时，同时会在cookie里写入一个对应的id值，如 session_sid，每次页面与服务器的交互都会自动带上cookie，服务器端会据这个id查找是否有对应的session保存，从而形成状态保存。</p>
<p>⋅⋅⋅这里我们也使用第三方库 express-session，安装同 mongoose</p>
<p>⋅⋅⋅在 /root/web/routes/index.js里引入  express-session，并新增app.use如下</p>
<pre><code class="lang-javascript">        var issue = require( &#39;./issue&#39; ),
              session = require( &#39;express-session&#39; ); //添加 express-session引用
        exports.all = function( app ){
            app.use( session({ //配置session
                resave: false,
                saveUninitialized: false,
                secret: &#39;upopen&#39;
            }))
            app.use( function( req, res, next){
                if( req.path != &#39;/login&#39; &amp;&amp; !req.session.status ){ //判断session状态是否是true
                    res.redirect(&#39;/login&#39;); //不是则跳转到登录页
                } else {
                    next(); //为true，则继续执行其请求
                }
            })
            app.get( &#39;/&#39;, function( req, res ){
                issue.index( req, res );
            });
        …
</code></pre>
<p>⋅⋅⋅上面的代码是对所有的页面做了限制，都必须是登录的状态才能访问，所以前端要先有注册成功的账号，这样的权限设置当然是不对的，我们只是做下测试。</p>
<p>⋅⋅⋅打开/root/web/controls/user.js，在findUser函数下新增如下代码</p>
<pre><code class="lang-javascript">        …
        function findUser( req, res ){
        var data = req.body;
            db.findUser( data, function( err, doc ){
                if( !err ){
                    if( doc ){ //如果登录有查找结果
                        req.session.status = true;        //则session里记录状态为true
                    }
                    res.send(  { code: 0, msg: &#39;find User Success&#39;, data: doc }  );
                }
            })
        }
        …
</code></pre>
<p>⋅⋅⋅再打开站点测试，发现，无论是访问index 还是 register都是自动跳转login，登录信息成功后，index和register都可以访问了，查看cookies里的信息，会看到 自动生成的connect.sid（名称可能不同），就是保存关联session的。手动删除connect.sid，所有页面又会都跳转到 login。</p>
<p>⋅⋅⋅cookie使用，可参考 <a href="http://www.upopen.cn/article/info?id=559e2cbda46ee1885f000002">http://www.upopen.cn/article/info?id=559e2cbda46ee1885f000002</a></p>
<p>⋅⋅⋅执行退出命令，只要设置req.session.status = false，即可。</p>
<h3 id="8-">8、权限设置</h3>
<p>⋅⋅⋅上一步，增加了页面请求对权限登录的验证，但是验证只是针对某些页面的，我们把需要验证的路径罗列下来。</p>
<p>⋅⋅⋅在/web/config下新增 privilege.js，用来罗列权限表，我们新增几个用户管理页面，用来表示权限需要</p>
<pre><code class="lang-javascript">
        module.exports = {
            &#39;/user/center&#39; : 1,
            &#39;/user/info&#39;: 1,
            &#39;/user/blog&#39;: 1
        }
</code></pre>
<p>⋅⋅⋅修改 /root/web/routes/index.js，引入/web/config/privilege.js，修改验证是否登录的app.use</p>
<pre><code class="lang-javascript">        …
        var privilege = require( &#39;../config/privilege&#39; );
        …
        app.use( function( req, res, next){
            if( privilege[ req.path ] &amp;&amp; req.path != &#39;/login&#39; &amp;&amp; !req.session.status ){
                //privilege[ req.path ] 判断该路径是否需要登录权限
                if( req.method == &#39;GET&#39; ){ //如果是get请求
                    res.redirect(&#39;/login&#39;); 则执行跳转
                } else { //其它请求，基本都是POST，是不能直接redirect
                    res.send( { code: 1001, msg: &#39;need you to log in&#39;}); //则返回错误码，提示需要登录
                }
            } else {
                next();
            }
        })
        …
</code></pre>
<p>⋅⋅⋅在web/routes 、web/views、status/module，新增对应的用户页面，user/blog，user/info，user/center，添加时注意文件夹的命名及细分。</p>
<p>⋅⋅⋅清除cookie，再访问 index 、register都是可以的，而user下的三个页面都需要登录。</p>
<h3 id="9-">9、页面登录状态显示 及 退出</h3>
<p>⋅⋅⋅在/root/static/public/js 下新建 all.js，用于所有页面都要执行js</p>
<p>⋅⋅⋅将页面据cookies判断登录状态的js写入，以便页面导航上 显示 登录 或 退出，通过requirejs，在每个页面引入。</p>
<p>⋅⋅⋅退出，即给退出链接加一个get请求，/logout，在/routes/index.js里，添加logout</p>
<pre><code class="lang-javascript">         ...
        app.get(&#39;/logout&#39;, function( req, res ){
            req.session.status = false; //设置session状态为未登录
            res.setHeader(&quot;Set-Cookie&quot;,&quot;username=null;&quot; ); //清除cookie
            res.redirect( &#39;/&#39; ); //跳转到首页
        })
        ...
</code></pre>
<h2 id="-">三、至此我们完成了简单完成了注册及登录功能流程。</h2>
<p>⋅⋅⋅本节我们主要完成：</p>
<p>⋅⋅⋅1、通过mongoose来操作mongo，完成数据增加和查询</p>
<p>⋅⋅⋅2、通过session保存登录状态</p>
<p>⋅⋅⋅3、完成注册 / 登录 / 退出</p>
<p>⋅⋅⋅4、增加权限判断</p>
<p>⋅⋅⋅本节我们虽然使用了session来记录登录状态，但实际使用时还是会有些问题，session是保存在本项目里的，如果上线后web服务端需要用多台计算机来负载，则状态不能共享。可以采用搭建验证服务器，即单独配置一个服务器来执行验证功能，也可以使用redis来保存登录状态。下节我们将使用redis来保存登录状态。</p>
<p>⋅⋅⋅下节主要实现：</p>
<p>⋅⋅⋅1、注册时的邮件验证</p>
<p>⋅⋅⋅2、redis保存登录状态</p>
<p>⋅⋅⋅3、nodejs异常处理，同步 and 异步</p>
<p>⋅⋅⋅4、git操作</p>
<h3 id="-q-435485569">全栈工程 - 技术新Q群：435485569</h3>
<h4 id="-nodejs-0-2-express-ajax-1-">上一篇：<a href="http://segmentfault.com/a/1190000002986191">公司项目NODEJS实践0.2[ express, ajax.. ]</a></h4>
<h4 id="-">下一篇：待续</h4>
</div>
    <div id="talkBox" class="talkBox">
        共收到<tt id="talkAmount">0</tt>条回11复：
    </div>
    <form id="talkBoxForm">
        <label>
	        <textarea id="talkcontent" placeHolder="评论内容200字" maxLength="200" style="width: 700px;padding: 10px" rows="5"></textarea>
        </label>
        <button type="submit" value="提交" style="width: 100px;height: 30px; margin: 20px 300px;">提交</button>
    </form>
</section>
<% include ../../common/kind.ejs %>
<% include ../../common/footer.ejs %>
