<% include ../../common/header.ejs %>
<section class="col-md-10" id="articleInfo">
<!--link href="<%= basePath %>/core/css/markdown.css" type="text/css" rel="stylesheet" -->
    <h1 id="title" class="articleInfo_title">公司项目NODEJS实践0.2[ express, ajax.. ]</h1>
	<span id="date" class="articleInfo_date">2015-08-30</span><span id="kind" class="articleInfo_kind">nodejs</span><span id="author" class="articleInfo_author">小白</span>
	<div id="content" class="articleInfo_content clearfix markdown"><h4 id="-">一、前言</h4>
<p>通过上节学习，我们已经ubuntu系统搭建了一个可以访问的nodejs系统，并做了nginx转发。本节原要做web端服务 及 mongodb的存取，但写着写着，web端就写了很长，有些啰嗦，本着不重要的讲一遍，重要写三遍的原则，本节主要是讲适合初学者的web端服务搭建。mongodb下节再讲。</p>
<hr>
<h4 id="-mongo">二、mongo</h4>
<h4 id="1-">1、安装：</h4>
<p>⋅⋅⋅执行 sudo apt-get install mongodb</p>
<p>⋅⋅⋅作用：安装mongodb，即安装成功，可以通过执行mongo，即可以看到mongo进入mongo的管理命令，并看到mongodb的版本号，mongo使用可参见</p>
<p>⋅⋅*<a href="http://www.upopen.cn/article/info?id=559688a7f0e6e0665b000004">http://www.upopen.cn/article/info?id=559688a7f0e6e0665b000004</a></p>
<h2 id="-web-">二、web服务</h2>
<h4 id="1-">1、实现路由功能</h4>
<p>⋅⋅⋅在web目录下创建routes目录，并创建index.js文件</p>
<p>⋅⋅⋅作用：创建路由文件夹，上一节我们在app.js添加了app.get(...)代码，实现将用户访问指向到index.ejs，我们单独创建一个文件夹来归类所有请求，后面有大量工作都是做功能模块、文件的细分，前期细化对后期项目扩展有益</p>
<p>⋅⋅⋅在/web/routes/index.js添加</p>
<pre><code class="lang-javascript">        exports.all = function( app ){
            app.get( &#39;/&#39;, function( req, res ){
                res.render( &#39;index.ejs&#39; );
            })
        }
</code></pre>
<p>⋅⋅⋅在/web/app.js里引用routes文件，并把app.get换成 routes里指向如下</p>
<pre><code class="lang-javascript">        var express    = require( &#39;express&#39; ),
                http              = require( &#39;http&#39; ),
                routes          = require( &#39;./routes&#39; ), //新增routes引用
                path             = require( &#39;path&#39; );
                ...
        app.use( &#39;/&#39;, express.static( path.join( __dirname, &#39;assets&#39; )));

        routes.all( app ); //原app.get替换成 routes，所有的请求走routes.all里定义的函数
        server.listen( app.get( &#39;port&#39; ), function(){
                console.log( &#39;root server listening on port &#39; + app.get( &#39;port&#39; ));
        } );
        ...
</code></pre>
<p>⋅⋅⋅重新执行node.js，浏览器打开站点，功能可以同样使用。</p>
<h4 id="2-">2、模板功能。</h4>
<p>⋅⋅⋅页面 header / footer / menu 通常是共用的，我们用ejs的include实现</p>
<p>⋅⋅⋅在views下创建common文件夹，存放页面的公用部分。</p>
<p>⋅⋅⋅common下创建header.ejs文件，加入页头的公用部分，可以视情况到&lt;body&gt;为止</p>
<pre><code class="lang-javascript">        &lt;!DOCTYPE html&gt;
        &lt;html&gt;
        &lt;head&gt;
        &lt;title&gt;我的nodejs项目&lt;/title&gt;
        &lt;link href=&quot;/public/css/style.css&quot; rel=&quot;stylesheet&quot; &gt;
        &lt;/head&gt;
        &lt;body&gt;
</code></pre>
<p>⋅⋅⋅引用了style.css的样式文件，自行在static下增加下。</p>
<p>⋅⋅⋅同样创建footer.ejs文件</p>
<pre><code class="lang-javascript">        &lt;script src=&quot;/core/js/jquery.min.js&quot;&gt;&lt;/script&gt;
        &lt;/body&gt;
        &lt;/html&gt;
</code></pre>
<p>⋅⋅⋅同样增加了jquery.min.js，在static下增加，这个js是放在core文件夹，与public区别开，用来放基本稳定的一些公用文件</p>
<p>⋅⋅⋅在views下创建issue文件夹，把/views/index.ejs放到/views/issue里，归类存放站点不需要登录的资源</p>
<pre><code class="lang-javascript">        views --- common --- header.ejs
                                     --- footer.ejs
                        --- issue --- index.ejs
</code></pre>
<p>⋅⋅⋅index.ejs内include header.ejs/ footer.ejs</p>
<pre><code class="lang-javascript">        &lt;% include ../common/header.ejs %&gt;
        &lt;h1&gt;我的nodejs项目&lt;/h1&gt;
        &lt;img src=&quot;/public/imgs/logo.png&quot; /&gt;
        &lt;% include ../common/footer.ejs %&gt;
</code></pre>
<p>⋅⋅⋅这样我们即实现了模板功能，header.js及 footer.js自行丰富，通常css文件放在header里，js放footer里，对渲染效率有益。</p>
<p>⋅⋅⋅注意： index.ejs的路径改了，路由指向index.ejs也要增加issue目录</p>
<h4 id="3-">3、新增注册页面：</h4>
<p>⋅⋅⋅复制/web/views/index.ejs，重命名为 register.ejs，增加form</p>
<pre><code>        &lt;% include ../common/header.ejs %&gt;
        &lt;form&gt;
            &lt;label&gt;用户名: &lt;input type=&quot;text&quot; id=&quot;username&quot; /&gt;&lt;/label&gt;
            &lt;label&gt;密码: &lt;input type=&quot;text&quot; id=&quot;password&quot; /&gt;&lt;/label&gt;
            &lt;label&gt;邮件: &lt;input type=&quot;text&quot; id=&quot;email&quot; /&gt;&lt;/label&gt;
            &lt;button type=&quot;submit&quot;&gt;注册&lt;/button&gt;
        &lt;/form&gt;
        &lt;% include ../common/footer.ejs %&gt;
</code></pre><p>⋅⋅⋅在/web/routes文件夹下，复制index.js 为 issue.js，写入代码</p>
<pre><code class="lang-javascript">        function register( req, res ){ //定义注册转向
            res.render( &#39;issue/register.ejs&#39; );
        }
        module.exports = { //对外公开register函数
            register: register
        }
</code></pre>
<p>⋅⋅⋅修改routes/index.js</p>
<pre><code class="lang-javascript">        var issue = require( &#39;./issue&#39; ); //引入issue.js文件
        exports.all = function( app ){
            app.get( &#39;/&#39;, function( req, res ){
                res.render( &#39;/issue/index.ejs&#39; );
            });
            app.get( &#39;/register&#39;, function( req, res ){
                issue.register( req, res ) //将register请求转向issue内的函数
            });
        }
</code></pre>
<p>⋅⋅⋅重启nodejs，访问 <a href="http://www.mynodejs.com/register。">http://www.mynodejs.com/register。</a></p>
<p>⋅⋅⋅后面我们频繁改动web里的文件，都需要重启才生效，影响效率，nodejs提供了node-dev模块，可以监听项目文件修改自动重启</p>
<h4 id="4-node-dev">4、node-dev</h4>
<p>⋅⋅⋅执行：npm install -g node-dev</p>
<p>⋅⋅⋅作用：将node-dev安装到全局模块</p>
<p>⋅⋅⋅关闭原来启动的nodejs，重新执行  node-dev - - debug app.js 即可，后面再改服务端js，nodejs会自动重启</p>
<h4 id="5-">5、页面文件个性化引用 及 静态文件目录</h4>
<p>⋅⋅⋅前面我们引用 了模板功能，header.ejs放公共文件，方便调用。但每个页面总有些个性化的信息及自己的css / js，此处用到了ejs的命令功能。</p>
<p>⋅⋅⋅首先，在root/static下创建 module文件夹放所有页面的静态文件，再针对每个页面创建对应的静态文件夹</p>
<p>⋅⋅⋅如 register，目录结构为</p>
<pre><code class="lang-javascript">

        static ---module ---issue ---register ---register.css
                                                                ---register.js
                                                                ---imgs
                                                   ---index ---index.css
                                                                ---index.js
                                                                ---imgs
</code></pre>
<p>⋅⋅⋅整体结构与ejs下一致</p>
<p>⋅⋅⋅打开header.ejs文件，首先每个页面 的title是个性化的，css，也需要引用 针对本页面的定义css</p>
<p>⋅⋅⋅修改如下</p>
<pre><code class="lang-javascript">        ...
        &lt;head&gt;
        &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt; &lt;!--个性化定义title--&gt;
        &lt;link href=&quot;&lt;%= basePath %&gt;/public/css/style.css&quot; rel=&quot;stylesheet&quot; &gt;
        &lt;link href=&quot;&lt;%= basePath %&gt;/module&lt;%= currentPage %&gt;.css&quot; type=&quot;text/css&quot; rel=&quot;stylesheet&quot; &gt; &lt;!--个性化定义引入文件--&gt;
        &lt;/head&gt;
        …
</code></pre>
<p>⋅⋅⋅在root/web/下新建config文件夹，用来放站点一些配置信息，其下新建site.js，配置页面信息</p>
<pre><code class="lang-javascript">        var siteTitle = &#39;优品开源&#39;, //站点名称
                pageTitle = { //各页面名称
                        &#39;/&#39;: &#39;首页&#39;,
                        &#39;/index&#39;: &#39;首页&#39;,
                        &#39;/register&#39;: &#39;注册&#39;
                },
                basePath = &#39;http://www.mynodejs.com&#39;;  //设置页面根路径
        module.exports = { //对外开放配置
                setting: function( req, path, file ){
                        return {
                                title:       pageTitle[ req.path ] + &#39;-&#39; + siteTitle, //组成当前页面标题
                                basePath:    basePath,
                                currentPage: ( path || &#39;&#39; ) + ( file || req.path.replace(/(\/[a-z|A-Z]*)?$/,function($1){return $1 + $1}) ), //据当前访问路径生成静态文件路径
                       }
                }
        }
</code></pre>
<p>⋅⋅⋅修改web/routes/issue.js，把index.ejs的引入也放进来</p>
<pre><code class="lang-javascript">        var site = require( &#39;../config/site&#39; ); //引入site Config
        function index( req, res ){
                res.render( &#39;issue/index.ejs&#39;, site.setting( req, &#39;/issue/index&#39;, &#39;/index&#39; ) );
        } //首页没有页面路径，需要指定path及 filename
        function register( req, res ){
                res.render( &#39;issue/register.ejs&#39;, site.setting( req, &#39;/issue&#39; ) ); //配置信息，供ejs调用
        }
        module.exports = {
                register: register
        }
</code></pre>
<p>⋅⋅⋅配置完成，项目是node-dev启动，无需重启，再访问下首页，可以看到title是“首页-优品开源”，也引用了其自己的index.css，register也一样</p>
<h4 id="6-requirejs">6、模块块管理 requireJs</h4>
<p>⋅⋅⋅js文件的调用，我们使用requireJs，使用参见</p>
<p>⋅⋅⋅/web/view/common/footer.ejs，修改如下</p>
<pre><code class="lang-javascript">        &lt;script type=&quot;text/javascript&quot; src=&quot;&lt;%= basePath %&gt;/core/jquery.min.js&quot;&gt;&lt;/script&gt;
        &lt;script type=&quot;text/javascript&quot; data-main=&quot;&lt;%= basePath %&gt;/module&lt;%= currentPage %&gt;.js&quot; src=&quot;&lt;%= basePath %&gt;/core/require.js&quot;&gt;&lt;/script&gt;
        &lt;!-- js的路径引用模式同css--&gt;
        &lt;/body&gt;
        &lt;/html&gt;
</code></pre>
<p>⋅⋅⋅如jquery这种各页面都需要引用的js，建议不要通过模块引用，徒增计算。</p>
<h4 id="7-ajax-">7、发送接收ajax请求</h4>
<p>⋅⋅⋅在 static/module/issue/register/register.js内增加ajax代码</p>
<pre><code class="lang-javascript">        define( function(){
                $( &#39;#registerForm&#39; ).on( &#39;submit&#39;, function(){
                        var data = {
                                username: $(&#39;#username&#39;).val(),
                                password: $(&#39;#password&#39;).val(),
                                email: $(&#39;#email&#39;).val()
                         };
                        $.ajax({
                                url: &#39;/register&#39;,
                                type: &#39;post&#39;,
                                dataType: &#39;json&#39;,
                                data: data,
                                success: function( ret ){
                                        console.log( ret );
                                }
                        });
                        return false;
                })
        });
</code></pre>
<p>⋅⋅⋅/web/routes/index.js 新增请求接收</p>
<pre><code class="lang-javascript">        app.post(&#39;/register&#39;, function( req, res ){
                issue.registerUser( req, res );
        });
</code></pre>
<p>⋅⋅⋅此处是app.post，对应ajax的type:&#39;post&#39;</p>
<p>⋅⋅⋅/web/routes/issue.js 新增</p>
<pre><code class="lang-javascript">        function registerUser( req, res ){
                res.send( { code: 0, msg: &#39;register info access success&#39;,data: req.body } );
                //这里原本是要处理数据库存储操作，这里先走通ajax通信，验证能成功获取数据
        }
</code></pre>
<p>⋅⋅⋅注意后面的 module.exports里要增加  registerUser</p>
<p>⋅⋅⋅通过 package.json 安装 body-parser 模块，方法见 0.1</p>
<p>⋅⋅⋅/web/app.js，新增</p>
<pre><code class="lang-javascript">        var express    = require( &#39;express&#39; ),
                ...
                bodyParser = require( &#39;body-parser&#39; ), //新增模块引用
                ...
                path             = require( &#39;path&#39; );

        ...
        app.use( &#39;/&#39;, express.static( path.join( __dirname, &#39;assets&#39; ))); //静态文件路径
        app.use( bodyParser.urlencoded({ extended: false }));
        …
</code></pre>
<p>⋅⋅⋅打开register，提交表单，打开调试工具，可以看到 ajax数据已经发送成功，并成功返回registerUser 里定义的数据</p>
<p>⋅⋅⋅OK，到现在为止，我们安装Mongo、实现的路由、公共模板 及 其内个性化数据的定义，使用node-dev，并成功在register页面通过ajax与WEB服务端通信，下一节，我们将WEB服务端接收到的数据insert到db，并能 find，站点就完成了初步的注册、登录中的数据交互</p>
<h3 id="-q-435485569">全栈工程 - 技术新Q群：435485569</h3>
<h4 id="-nodejs-0-1-ubuntu-nodejs-nginx-1-">上一篇：<a href="http://segmentfault.com/a/1190000002983262">公司项目NODEJS实践0.1[ ubuntu,nodejs,nginx...]</a></h4>
<h4 id="-nodejs-0-3-mongo-session-0-">下一篇：<a href="http://segmentfault.com/a/1190000002989684">公司项目NODEJS实践0.3[ mongo / session ...]</a></h4>
</div>
    <div id="talkBox" class="talkBox">
        共收到<tt id="talkAmount">0</tt>条回11复：
    </div>
    <form id="talkBoxForm">
        <label>
	        <textarea id="talkcontent" placeHolder="评论内容200字" maxLength="200" style="width: 700px;padding: 10px" rows="5"></textarea>
        </label>
        <button type="submit" value="提交" style="width: 100px;height: 30px; margin: 20px 300px;">提交</button>
    </form>
</section>
<% include ../../common/kind.ejs %>
<% include ../../common/footer.ejs %>
